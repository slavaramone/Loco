// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Tracker.Db;

namespace Tracker.Db.Migrations
{
    [DbContext(typeof(TrackerDbContext))]
    [Migration("20210218123319_AddedIndexesTOFuelSensorRawData")]
    partial class AddedIndexesTOFuelSensorRawData
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn)
                .HasAnnotation("ProductVersion", "3.1.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("Tracker.Db.Entities.FuelLevel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("CreationDateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<double>("RawValue")
                        .HasColumnType("double precision");

                    b.Property<DateTimeOffset>("ReportDateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("TrackerId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ReportDateTime");

                    b.HasIndex("TrackerId");

                    b.ToTable("FuelLevels");
                });

            modelBuilder.Entity("Tracker.Db.Entities.FuelSensor", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("TrackerId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("TrackerId");

                    b.ToTable("FuelSensors");
                });

            modelBuilder.Entity("Tracker.Db.Entities.FuelSensorRawData", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("CreationDateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("FuelSensorId")
                        .HasColumnType("uuid");

                    b.Property<double>("RawValue")
                        .HasColumnType("double precision");

                    b.Property<DateTimeOffset>("ReportDateTime")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("FuelSensorId");

                    b.HasIndex("RawValue");

                    b.HasIndex("ReportDateTime");

                    b.ToTable("FuelSensorRawData");
                });

            modelBuilder.Entity("Tracker.Db.Entities.MapItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("CreationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsStatic")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("character varying(256)")
                        .HasMaxLength(256);

                    b.Property<string>("TrackerId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("TrackerId");

                    b.ToTable("MapItems");
                });

            modelBuilder.Entity("Tracker.Db.Entities.PrecisionGeoData", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<double?>("Altitude")
                        .HasColumnType("double precision");

                    b.Property<DateTimeOffset>("CreationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<double?>("Heading")
                        .HasColumnType("double precision");

                    b.Property<double>("Latitude")
                        .HasColumnType("double precision");

                    b.Property<double>("Longitude")
                        .HasColumnType("double precision");

                    b.Property<Guid>("RawGeoDataId")
                        .HasColumnType("uuid");

                    b.Property<double?>("Speed")
                        .HasColumnType("double precision");

                    b.Property<DateTimeOffset>("TrackDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("TrackerId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CreationDate");

                    b.HasIndex("RawGeoDataId");

                    b.HasIndex("TrackerId");

                    b.ToTable("PrecisionGeoData");
                });

            modelBuilder.Entity("Tracker.Db.Entities.RawGeoData", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<double?>("Altitude")
                        .HasColumnType("double precision");

                    b.Property<DateTimeOffset>("CreationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<double?>("Heading")
                        .HasColumnType("double precision");

                    b.Property<double>("Latitude")
                        .HasColumnType("double precision");

                    b.Property<double>("Longitude")
                        .HasColumnType("double precision");

                    b.Property<Guid>("MapItemId")
                        .HasColumnType("uuid");

                    b.Property<double?>("Speed")
                        .HasColumnType("double precision");

                    b.Property<DateTimeOffset>("TrackDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CreationDate");

                    b.HasIndex("MapItemId");

                    b.HasIndex("TrackDate");

                    b.ToTable("RawGeoData");
                });

            modelBuilder.Entity("Tracker.Db.Entities.FuelSensorRawData", b =>
                {
                    b.HasOne("Tracker.Db.Entities.FuelSensor", "FuelSensor")
                        .WithMany("FuelSensorRawData")
                        .HasForeignKey("FuelSensorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Tracker.Db.Entities.PrecisionGeoData", b =>
                {
                    b.HasOne("Tracker.Db.Entities.RawGeoData", "RawGeoData")
                        .WithMany("PrecisionGeoData")
                        .HasForeignKey("RawGeoDataId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Tracker.Db.Entities.RawGeoData", b =>
                {
                    b.HasOne("Tracker.Db.Entities.MapItem", "MapItem")
                        .WithMany("RawGeoData")
                        .HasForeignKey("MapItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
